WebSockets Module
=================
Rino Jose <@rjose>
v1, July 10, 2013: Finished step 1


Overview
--------
About a month ago, we
link:https://github.com/rjose/prototypes/tree/master/serve_ws[prototyped] a
number of areas related to websockets. What I'd like to do now is to use that
work to do TDD on a websockets module that we can use in apps like QPlan. We
should be able to integrate this into the "handle_request_routine". Somewhere
in that routine should be a call to check if the request is the start of a
websocket handshake (that's something that we'll need to implement here). If
so, it should try to establish a websocket connection; if not, it should
handle the HTTP request. All of this should happen within the same request
handling thread.

Once the connection is established, the thread will continue to run until the
connection is closed. We'll have to make sure we do this efficiently. If this
hasn't been prototyped properly, we should do so first.

We'll need some way to associate a websocket channel with something in the
app. For instance, one channel is publishing content to people in a meeting
while another channel is providing data to a hub app. We need to keep these
straight within each app.


Implementation
--------------
. Check if request is start of websocket handshake [X][X][][]
. Complete websocket handshake (server) [X][X][X][X][X][X]
. Construct short message [X][X][X][X][]
. Read short message [][][][]
. Construct medium message
. Construct long message
. Read medium message
. Read long message
. Close channel
. Handle close channel
. Construct PING/PONG messages
. Read PING/PONG message

. Start websocket handshake (as a client)
. Complete websocket handshake (as a client)


1 - Check if request is start of websocket handshake
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The first step is to get some initial empty tests to run. I'll copy what I did
for link:https://github.com/rjose/products/tree/master/algoc[algoc]. Done!
Now, let's get some HTTP request strings and see if we can tell if they're
websocket requests or not. I'll start with the first example in the spec.
Alright, I have the test set up. Let's copy stuff from our proto1.m file. The
first thing I need to do is search our request string for "Upgrade:
websocket". Done.

2 - Construct websocket handshake (server)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assuming that we have a valid ws handshake request, we need to get the
Sec-Websocket-Key and construct the Sec-WebSocket-Accept value. We need to
check the fields of the response string. Alright, I set up the test and got it
to fail. The next step is constructing the response. We need to extract the
Sec-WebSocket-Key from the response. Alright, I need to do the base64
encoding/decoding. I'll grab some functions from
link:http://doctrina.org/Base64-With-OpenSSL-C-API.html[here]. I think I'll
need to prototype these first to feel comfortable with them.

3 - Construct short message
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, let's see if we can construct a short message. In order to construct
a short message, we have to construct a frame and mask the message. I'll do
this in a test. Alright, I was able to construct a "Hello" message text frame.
Before we go on, let's use uint8_t instead of unsigned char everywhere for
data. Next, let's test the boundary cases for short messages: empty message
and 125 char message. Done! Next, let's try short messages with a mask. I
think masking the hello message is sufficient. Done.


Thoughts
--------
I think I'll symlink the websockets directory into the project that needs it
and compile everything into one executable.

I need to do the masked and unmasked versions.
