QPlan v4
========
Rino Jose <@rjose>
v2, Jul 1, 2013: Initial spec

Drafting effort [][]

Overview
--------
The goal of this version is to have QPlan listen for web requests and serve web
pages. The first step is to organize our lua code into app code and modules. The
next step is to bring over the code that can listen and respond to web
requests. After that, we'll pull the lua web request parsing/routing code into a
web module. Finally, we'll create some pages using angular to serve content.

Implementation
--------------

. Organize lua and C code [X][X][X][][]
. Listen and respond to web requests [][][][][][]
. Add lua web module [][][][]
. Create angular pages [][][][][][][][]
. Add readline support [][][][][]


1 - Organize lua and C code
~~~~~~~~~~~~~~~~~~~~~~~~~~~
We should use qplan-c/proto2 as a model here. We'll copy the lua code from
qplan/v2 and see if we can get it running through our custom shell. Let's start
by getting the custom shell running first. Hmmmm. Forgot to check in the
tcp_io.[ch] changes I made. I guess I'll just have to code it up again. These
were just minor changes (function renaming). Alright, I got it to build. Let's
copy the app code over. Done. Let's check this in.

Alright, let's start cleaning some things up. I don't like the global pl and ppl
variables. We should clean these up when we start in on the qplan language. How
about we start by splitting out the repl and web parts of the qplan.c file out.
We should document these as well. I want to only have one lua state for now and
have a lock around that. Done. Alright, let's split out the QPlanContext into
its own files. We'll leave "err_abort" in qplan.c until we have enough utils to
pull it out. After that, we'll create repl and web C files. Done!

OK, next up is bringing up the lua functions from qplan_web. I want to bring the
tests over for these as well. Let's see what would happen with a web request
now. I think we'll get an error on the handle_request call. We got an
unprotected call and died. Let's see if we can make this a protected call. Hmmm.
Not sure how to do this. I did fix this, though, by calling "lua_setglobal"
after the web module was required to set "web".


Thoughts
--------
